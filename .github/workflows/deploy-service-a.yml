# .github/workflows/deploy-service-a.yml

name: Deploy Service A to AWS Lambda

on:
  push:
    branches:
      - main
    paths:
      - 'service-a/**'
      - '.github/workflows/deploy-service-a.yml'

jobs:
  build_and_deploy_service_a:
    runs-on: ubuntu-latest
    # Define environment variables for the job
    env:
      SERVICE_DIR: service-a # Directory for Service A
      STACK_NAME: portfolio-app-stack

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4 # Gets your code into the runner

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22' # Use Node.js version 22.x (match your Lambda runtime)
          cache: 'npm' # Enable caching for npm dependencies in the service directory
          cache-dependency-path: ${{ env.SERVICE_DIR }}/package-lock.json

      # Step 3: Configure AWS credentials
      # Uses the secrets you added to GitHub repository settings
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Install dependencies and build TypeScript code for Service A
      - name: Build Service A
        run: | 
          cd ${{ env.SERVICE_DIR }}
          echo "Current directory: $(pwd)"
          echo "Listing files: $(ls -la)"
          echo "Installing dependencies..."
          npm ci
          echo "Building code..."
          npm run build
          echo "Build complete. Listing dist folder:"
          ls -la dist/

      # Step 5: Run tests (Placeholder - Implement actual tests later!)
      - name: Run tests
        run: |
          cd ${{ env.SERVICE_DIR }}
          echo "Running tests..."
          echo "No real tests configured yet." 
      
    # Step 6: Install AWS SAM CLI
      # Python is usually pre-installed on GitHub runners
      - name: Install AWS SAM CLI
        run: pip install aws-sam-cli

      # Step 7: Build the SAM application
      # This step prepares the application for deployment, resolving dependencies, etc.
      - name: Run sam build
        run: sam build --template template.yaml

      # Step 8: Deploy using AWS SAM
      # Deploys the CloudFormation stack defined in template.yaml
      - name: Deploy using AWS SAM
        run: sam deploy --stack-name ${{ env.STACK_NAME }} --s3-bucket mack-portfolio-sam-artifacts-ca-central-1 --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND --region ${{ secrets.AWS_REGION }} --no-confirm-changeset --no-fail-on-empty-changeset